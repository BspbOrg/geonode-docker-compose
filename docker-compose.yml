version: '2.2'
services:

  db:
    build: docker/postgis
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
      - ./scripts/docker/env/${SET_DOCKER_ENV}/db.env

  rabbitmq:
    build: docker/rabbitmq
    restart: unless-stopped
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}

  geoserver:
    build: docker/geoserver
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - data-dir-conf
    volumes:
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
    env_file:
      - ./scripts/docker/env/${SET_DOCKER_ENV}/geoserver.env

  django:
    restart: unless-stopped
    build: docker/geonode
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: django
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - rabbitmq
      - geoserver
      - data-dir-conf
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
    env_file:
      - ./scripts/docker/env/${SET_DOCKER_ENV}/django.env
    environment:
      - IS_CELERY=false
      - UWSGI_CMD=uwsgi --ini /usr/src/app/uwsgi.ini

  celery:
    restart: unless-stopped
    build: docker/geonode
    container_name: celery4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: celery
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - rabbitmq
      - geoserver
      - data-dir-conf
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
    env_file:
      - ./scripts/docker/env/${SET_DOCKER_ENV}/django.env
    environment:
      - IS_CELERY=true
      - CELERY_CMD=celery -A geonode.celery_app:app worker -B -E --statedb=/mnt/volumes/statics/worker.state -s /mnt/volumes/statics/celerybeat-schedule --loglevel=INFO --concurrency=10 -n worker1@%h -f /var/log/celery.log

  geonode:
    build: docker/nginx
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - geoserver
#    ports:
#      - "80:80"
    volumes:
      - statics:/mnt/volumes/statics

  data-dir-conf:
    build: docker/geoserver_data
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

volumes:
  statics:
    name: ${COMPOSE_PROJECT_NAME}-statics
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  rabbitmq:
    name: ${COMPOSE_PROJECT_NAME}-rabbitmq
  backup-restore:
    name: ${COMPOSE_PROJECT_NAME}-backup-restore
